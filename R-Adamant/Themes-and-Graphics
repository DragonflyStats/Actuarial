R-Adamant provides highly customizable plotting functionality.
Rocco Claudio Cannizzaro
 
Colors and styles are centrally managed and organised in themes which are collections of plotting options: all plots generated by the various functions of the package make use of the theme definitions.
Themes contain multiple options for which a default value has been assigned. There are various benefits of this approach:
It is easier to generate complex charts without having to write long code.
Once a theme is selected, all plots share the same style, hence a change in one of the options is automatically reflected by all the subsequent charts, providing a consistent plotting functionality.
Theme definitions are saved on files which are dynamically loaded. New themes can be created by duplicating existing themes and applying the required customization.
We will now see how themes are defined and how to control the graphics of the charts.
All theme definitions are saved in the "/themes" directory of the package installation folder. To find where this is on your system type the following code:
 
library(help = RAdamant)$path
[1] ".../R/win-library/2.13/RAdamant"
 
The current version of the package (0.8.3.2) comes with two themes:
.../themes/finance.r
.../themes/vanilla.r
 
which are loaded using the function loadThemes():
 
# Load all available themes from file
loadThemes()
Loading R-Adamant Themes: 
-> 1) finance 
-> 2) vanilla
 
When the function is called, it looks for all files contained in the /themes folder and for each of those files it creates a theme object named after the file. A theme identifier is also associated with the name as shown above (identifier = 1, name = finance).
Each theme is a list object containing all the plotting options. To retrieve one of the themes, the following command can be used:
 
# Retrieve a theme definition
getTheme("vanilla") # Partial matching of the name is also possible
# Alternatively the theme can be retrieved by id
getTheme(2)

$plot.width
[1] 680
 
$plot.height
[1] 480
 
$col.main
[1] "#0E2255"
 
$cex.main
[1] 1.2

...
 
To create a new custom theme the procedure is the following:
Take a copy  of one of the existing theme files and give it the name you like (i.e. myFirstTheme.r). The file name will be the name of the theme.
Modify the definition of the parameters of interest. The theme files contain comments explaining the meaning of each parameter. 
Save the file in the /themes directory of the RAdamant package
Execute the command loadThemes() to refresh the memory cache 
 
loadThemes()
Loading R-Adamant Themes: 
-> 1) finance 
-> 2) myFirstTheme
-> 3) vanilla
 
The new theme is now ready to be used. Note how the identifiers are changed, since these are assigned in alphabetical order.
Using the function setCurrentTheme(...), you can set the theme to be used by default for all the plots:
 
# Set the vanilla theme as default
setCurrentTheme("vanilla")
 
From now on all charts will make use of the vanilla theme:
 
# Load sample financial series
data(ex_fs)
# Plot the data
plot(ex_fs)
